/**
 ** created by Cahya Alkahfi
 **/
 
import kotlin.math.PI
import kotlin.math.sqrt
 
abstract class Shape {
    abstract fun calculateArea() : Double
    abstract fun calculatePerimeter() : Double
}
 
open class Rectangle(val width: Double, val length: Double) : Shape() {
 
    override fun calculateArea(): Double {
        return width*length
    }
 
    override fun calculatePerimeter(): Double {
        return 2 * (width + length)
    }
}
 
class Square(side: Double) : Rectangle(side, side)
 
class Triangle(private val s1 : Double, private val s2 : Double, private val s3 : Double) : Shape() {
 
    private var height : Double = 0.0
 
    constructor(base : Double, height: Double) : this(base, 0.0, 0.0) {
        this.height = height
    }
 
    override fun calculateArea() : Double {
        return if(s1 > 0 && s2 > 0 && s3 > 0) {
                    val s = calculatePerimeter()/2
                    sqrt(s * (s - s1) * (s - s2) * (s - s3))
                }
                else {
                    1.0/2 * s1 * height
                }
    }
 
    override fun calculatePerimeter(): Double {
        return s1 + s2 + s3
    }
}
 
class Circle(var radius : Double) : Shape() {
 
    override fun calculateArea(): Double {
        return PI*radius*radius
    }
 
    override fun calculatePerimeter(): Double {
        return 2*PI*radius
    }
}
